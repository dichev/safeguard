#!/usr/bin/env node

'use strict';

require('moment-recur')
const program = require('commander')
const SafeGuard = require('../src/App')

const OPERATORS = Object.keys(require('../src/config/Config').credentials.databases.operators)


program
    .option('-o, --operators <operators>', `Comma-separated list on which operators to be executed. Available: ${OPERATORS}. Default: all `)
    .option('-v, --verbose', 'Display error stack trace')
    .option('--clean', `Fresh start - will clean the safeguard database logs and alerts`)
    .option('--serve', `Expose http server to provide prometheus metrics`)
    .option('--history <date|range>', `Check for anomalies in previous periods. You can define the period as date(2018-04-01) or as range(2018-04-01..2018-04-05)`)
    .option('--debug-reduce-thresholds <percent>', `Reduce thresholds by this percent. For example if is set to 0.5, then all thresholds will be divided by 2. Useful during debugging, disabled on production`)
    
    .version(require('../package.json').version)
    .parse(process.argv)



;(async function () {
    let operators = program.operators && program.operators !== 'all' ? program.operators.split(',') : OPERATORS
    let safeguard = new SafeGuard(operators, { debugReduceThresholds: parseFloat(program.debugReduceThresholds) })
    
    if(program.serve) {
        if(program.history) throw Error('The server is not supported with --history')
        await safeguard.serve()
    }

    if(program.clean) {
        await safeguard.cleanDatabaseLogs()
    }
    
    if(program.history){
        console.warn(`\n=== Running in history mode for ${program.history} ===\n`)
        let from, to
        if (program.history.indexOf('..') !== -1) {
            [from, to] = program.history.split('..')
        } else {
            from = to = program.history
        }
    
        await safeguard.history(from, to)
    }
    
    else {
        await safeguard.activate()
    }
    
})()
.catch(err  => {
    program.verbose ? console.error(err.stack) : console.error(err.message || err)
    process.exit(1)
})


