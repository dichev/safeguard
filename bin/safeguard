#!/usr/bin/env node

'use strict';

const program = require('commander')
const Safeguard = require('../src/SafeGuard')
const OPERATORS = Object.keys(require('../src/config/Config').credentials.databases.operators)


program
    .usage('[--operators=<operators> --period <date|period|auto>]')
    
    .option('-o, --operators <operators>', `Comma-separated list on which operators to be executed. Available: ${OPERATORS}. Default: all `)
    // .option('-m, --mode <parallel|sequential>', `Run multiple operators in parallel or one by one. Default: parallel `)
    .option('-v, --verbose', 'Display error stack trace')
    .option('--clean', `Fresh start - will clean the safeguard database logs and alerts`)
    
    .version(require('../package.json').version)
    .parse(process.argv)



;(async function () {
    if(program.clean) await Safeguard.cleanDatabase()
    // let parallel = program.mode !== 'sequential'
    let operators = program.operators && program.operators !== 'all' ? program.operators.split(',') : OPERATORS
    
    let guards = []
    for (let operator of operators) {
        guards.push(new Safeguard(operator))
    }
    // run in parallel
    await Promise.all(guards.map(guard => guard.activate()))
})()
.then(() => console.log('\nDone!'))
.catch(err  => {
    program.verbose ? console.error(err.stack) : console.error(err.message || err)
    process.exit(1)
});


